####### 그리디 알고리즘(탐욕법)
###  현재 상황에서 지금 당장 좋은 것만 고르는 방법(매상황에서 가장 큰 값만 고르는 방식) - 정당성 분석이 중요
# 단순히 가장 좋아 보이는 것을 반복적으로 선택해도 최적의 해를 구할 수 있는지 검토
# (일반적) - 그리디 알고리즘은 최적의 해를 보장할 수 없을 때가 많음
# (코딩테스트) - 대부분 그리디 문제는 탐욕법으로 얻은 해가 최적의 해가 되는 상황에서, 이를 추론할 수 있어야 풀리도록 출제

# 문제 : 1이 될 때까지
#  어떠한 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 한다.
#  단 두 번째 연산을 N이 K로 나누어떨어질 때만 선택할 수 있다.


#  1. N에서 1을 뺀다.
#  2. N을 K로 나눈다.

# 예를 들어 N이 17, K가 4라고 가정하자. 이때 1번의 과정을 한 번 수행하면 N은 16이 된다. 이후 2번을 2번 반복하면 N은 1이된다. 결과적으로 이 경우 전체 과정을 실행한 횟수는 3이 된다. 이는 N을 1로 만드는 최소 횟수이다.

# N과 K가 주어질 때 N이 1이 될때까지 1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을 작성하시오

# 입력 조건
# 첫째 줄에 N(2<= N <= 100000)과 K(2 <= K <= 100000)가 공백으로 구분되며 각각 자연수로 주어짐

# 이때, 입력으로 주어지는 N은 항상 K보다 크거나 같음

# 출력 조건
# 첫째 줄에 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 횟수의 최솟값을 출력

# 입력 예시
# 3 3
# 3 1 2
# 4 1 4
# 2 2 2

# 출력 예시
# 2

# 풀이 포인트
# 주어진 N에 대하여 최대한 많이 나누기를 수행해야함
# N의 값을 줄일 때 2 이상의 수로 나누는 작업이 1을 빼는 작업보다 수를 훨씬 많이 줄일 수 있다.
#  ex) N=25, K=3

####### 정당성 분석 : 가능하면 최대한 많이 나누는 작업이 최적의 해를 항상 보장할수 있을까?
# N이 아무리 큰 수여도, K로 계속  나눈다면 기하급수적으로 빠르게 줄일 수 있다.
# 다시말해 K가 2이상이기만 하면, K로 나누는 것이 1을 빼는 것보다 항상 빠르게 N을 줄일 수 있다.
# 또한 N은 항상 1에 도달하게 된다(최적의 해 성립)

#####  답안 예시
n, k = map(int, input().split()) # N, K을 공백을 기준으로 구분하여 입력 받기
# 입력받은 문자열을 공백을 기준으로 나눈뒤에 맵함수를 이용하여 정수로 바꿔서 n,k에 넣음

result = 0

while True:
  #  N이 K로 나누어 떨어지는 수가 될 때까지 빼기
  target = (n // k) * k # n이 k로 나누어떨어지지않을때 가장 가까운 k로 나누어떨어지는 수를 찾자
  result += (n - target) # 총 연산횟수 result에 1을 빼는 연산을 몇번 수행할지 계산해서 넣어줌
  n = target
  #  N이 K보다 작을 때 (더이상 나눌수 없을때) 반복문 탈출
  if n < k:
    break
  # K로 나누기
  result += 1
  n //= k

# 마지막으로 남은 수에 대하여 1씩 빼기
result += (n - 1)
print(result)


# 내가 푼 풀이
n, k = map(int, input().split())
count = 0
while True:
      if n % k != 0:
          n -= 1
          count += 1
      else: 
          n //= k
          count += 1
      if n < k:    break;
      
   
n -= 1
count += 1

print(count)