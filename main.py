# 문제 3: 곱하기 혹은 더하기
# 각 자리가 숫자(0부터 9)로만 이루어진 문자열 S가 주어졌을 때, 왼쪽부터 오른쪽으로 하나씩 모든 숫자를 확인하며 숫자 사이에 'x' 혹은 '+' 연산자를 넣어 결과적으로 만들어질 수 있는 가장 큰 수를 구하는 프로그램을 작성하세요. 단, + 보다 x를 먼저 계산하는 일반적인 방식과는 달리, 모든 연산은 왼쪽에서부터 순서대로 이루어진다고 가정합니다.
# 예를 들어, 02984라는 문자열로 만들 수 있는 가장 큰 수는 ((((0 + 2)x 9)x 8)x 4) = 576입니다. 또한 만들어질 수 있는 가장 큰 수는 항상 20억 이하의 정수가 되도록 입력이 주어집니다.

# * 문제 조건
# 난이도:하  풀이시간:30분  시간제한:1초  기출:페이스북 인터뷰

# 입력조건- 첫째 줄에 여러개의 숫자로 구성된 하나의 문자열 S가 주어집니다.(1<=S의 길이 <=20)

# 출력조건- 첫째 줄에 만들어 질 수 있는 가장 큰 수를 출력합니다.


# 1) 입력예시: 02984
#    출력예시: 576
# 2) 입력예시 567
#     출력예시 210

# 대부분의 경우 '+' 보다는 'x'가 더 값을 크게 만듬.
# 다만 두 수 중에서 하나라고 '0' 혹은 '1'인 경우, 곱하기보다는 더하기가 더 효율적
# 따라서 두 수에 대하여 연산을 수행할 때, 두 수 중에서 하나라도 1 이하인 경우에는 +, 
# 두 수가 모두 2 이상인 경우에는 *하면 정답

data = input()

# 첫 번째 문자를 숫자로 변경하여 대입
result = int(data[0])

for i in range(1, len(data)): # 두번째 숫자부터 하나씩 확인하면서
  # 두 수 중에서 하나라도 '0' 혹은 '1'인 경우, 곱하기보다는 더하기 수행
  num = int(data[i])
  if num <= 1 or result <= 1:
      result += num
  else:
      result *= num
print(result)
