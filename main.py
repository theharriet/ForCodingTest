# import sys

# data = sys.stdin.readline().rstrip()
# print(data)


####### 그리디 알고리즘(탐욕법)
###  현재 상황에서 지금 당장 좋은 것만 고르는 방법(매상황에서 가장 큰 값만 고르는 방식) - 정당성 분석이 중요
# 단순히 가장 좋아 보이는 것을 반복적으로 선택해도 최적의 해를 구할 수 있는지 검토
# (일반적) - 그리디 알고리즘은 최적의 해를 보장할 수 없을 때가 많음
# (코딩테스트) - 대부분 그리디 문제는 탐욕법으로 얻은 해가 최적의 해가 되는 상황에서, 이를 추론할 수 있어야 풀리도록 출제

# ✔문제
# 당신은 음식점의 계산을 도와주는 점원이다. 카운터에는 거스름돈으로 사용할 500원,100원,50원,10원짜리 동전이 무한히 존재한다고 가정한다. 손님에게 거슬러 줘야 할 돈이 N원일 때 거슬러줘야할 동전의 최소 개수를 구하라. 단 N은 항상 10의 배수이다.

# -> 가장 큰 화폐 단위부터
# 정당성 분석 : 가지고 있는 동전 중에서 큰 단위가 항상 작은 단위의 배수이므로 작은 단위의 동전들을 종합해 다른 해가 나올수 없기 때문
# ex. 만약 800원을 거슬러 주어야하는데 화폐 단위가 500원 400원 100원이라면 어떻게 될지..500하나100세개는 최적아님 400두개가 최적

#그리디 알고리즘 문제에서는 이처럼 문제풀이를 위한 최소한의 아이디어를 떠올리고 이것이 정당한지 검토할수있어야..
# ex. 10원으로 다 거슬러준다 / 랜덤으로 거슬러준다 등 고민하다 가장 큰 화폐부터.. 로 생각해보는..

# 거스름돈 1260원일 때
n = 1260
count = 0 #결과값이 될겨

# 큰 단위의 화폐부터 차례대로 확인하기
array = [500, 100, 50, 10]

for coin in array:
    count += n // coin # 해당 화폐로 거슬러 줄 수 있는 동전의 개수 세기 - 결과값에 n을 coin으로 나눈 몫
    n %= coin # 500원 2개로 빼고 남은돈 260원(나머지)이 두번째 n이 됨 -> 세번째 n = 60

print(count)

# n의 값을 지정하고, 화폐를 큰 단위부터 순서대로 배열 지정
# count에 개수를 저장하고, n에는 남은 동전을 저장
# 화폐의 종류만이 시간 복잡도에 영향을 미친다. 시간 복잡도는 O(화폐의 종류 개수), 금액의 크기와는 무관